// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  projects      Project[]
  templates     Template[]
  assets        Asset[]
  accounts      Account[]
  sessions      Session[]
  settings      Settings?
}

// OAuth Accounts for third-party authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// User sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User project (journal/planner)
model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages       Page[]
}

// Individual pages within a project
model Page {
  id        String   @id @default(cuid())
  pageType  String   // daily, weekly, monthly, notes, etc.
  pageData  String   @db.LongText // JSON data for canvas content
  pageNumber Int
  month     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  
  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Templates for pages
model Template {
  id        String   @id @default(cuid())
  name      String
  thumbnail String?
  data      String   @db.LongText // JSON data for template content
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

// User assets (images, stickers, etc.)
model Asset {
  id        String   @id @default(cuid())
  name      String
  type      String   // image, sticker, icon, etc.
  url       String
  createdAt DateTime @default(now())
  userId    String
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User settings
model Settings {
  id             String  @id @default(cuid())
  theme          String  @default("light")
  defaultPageSize String  @default("A4")
  defaultOrientation String @default("portrait")
  userId         String  @unique
  
  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
